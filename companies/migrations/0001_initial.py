# Generated by Django 5.2.4 on 2025-08-05 04:26

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('applicants', '0002_initial'),
        ('jobs', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Nombre oficial de la empresa', max_length=200, verbose_name='Nombre de la empresa')),
                ('slug', models.SlugField(blank=True, help_text='URL amigable para la empresa (se genera automáticamente)', max_length=200, unique=True)),
                ('description', models.TextField(blank=True, help_text='Descripción de la empresa, su misión y valores', verbose_name='Descripción')),
                ('industry', models.CharField(blank=True, choices=[('technology', 'Tecnología'), ('finance', 'Finanzas'), ('healthcare', 'Salud'), ('education', 'Educación'), ('retail', 'Retail'), ('manufacturing', 'Manufactura'), ('consulting', 'Consultoría'), ('marketing', 'Marketing'), ('real_estate', 'Bienes Raíces'), ('hospitality', 'Hospitalidad'), ('transportation', 'Transporte'), ('energy', 'Energía'), ('agriculture', 'Agricultura'), ('entertainment', 'Entretenimiento'), ('government', 'Gobierno'), ('nonprofit', 'Sin Ánimo de Lucro'), ('other', 'Otro')], help_text='Sector industrial principal', max_length=50, verbose_name='Industria')),
                ('size', models.CharField(blank=True, choices=[('startup', 'Startup (1-10 empleados)'), ('small', 'Pequeña (11-50 empleados)'), ('medium', 'Mediana (51-200 empleados)'), ('large', 'Grande (201-1000 empleados)'), ('enterprise', 'Corporativa (1000+ empleados)')], max_length=20, verbose_name='Tamaño de la empresa')),
                ('website', models.URLField(blank=True, help_text='URL del sitio web oficial', validators=[django.core.validators.URLValidator()], verbose_name='Sitio web')),
                ('location', models.CharField(blank=True, help_text='Ciudad, país donde se encuentra la empresa', max_length=200, verbose_name='Ubicación')),
                ('address', models.TextField(blank=True, verbose_name='Dirección completa')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Teléfono')),
                ('founded_year', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1800), django.core.validators.MaxValueValidator(2025)], verbose_name='Año de fundación')),
                ('employee_count', models.PositiveIntegerField(blank=True, help_text='Número aproximado de empleados', null=True, verbose_name='Número de empleados')),
                ('logo', models.ImageField(blank=True, help_text='Logo oficial de la empresa (recomendado: 300x300px)', null=True, upload_to='companies/logos/', verbose_name='Logo de la empresa')),
                ('cover_image', models.ImageField(blank=True, help_text='Imagen de portada para el perfil público', null=True, upload_to='companies/covers/', verbose_name='Imagen de portada')),
                ('is_public', models.BooleanField(default=True, help_text='¿El perfil de la empresa es visible públicamente?', verbose_name='Perfil público')),
                ('is_verified', models.BooleanField(default=False, help_text='¿La empresa ha sido verificada por el equipo de Meraki?', verbose_name='Empresa verificada')),
                ('is_premium', models.BooleanField(default=False, help_text='¿La empresa tiene una suscripción premium?', verbose_name='Cuenta premium')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Notificaciones por email')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='Notificaciones por SMS')),
                ('weekly_digest', models.BooleanField(default=True, verbose_name='Resumen semanal')),
                ('total_jobs_posted', models.PositiveIntegerField(default=0, verbose_name='Total de vacantes publicadas')),
                ('total_hires', models.PositiveIntegerField(default=0, verbose_name='Total de contrataciones')),
                ('avg_time_to_hire', models.PositiveIntegerField(default=0, verbose_name='Tiempo promedio de contratación (días)')),
                ('profile_views', models.PositiveIntegerField(default=0, verbose_name='Vistas del perfil')),
                ('billing_contact_name', models.CharField(blank=True, max_length=200, verbose_name='Contacto de facturación')),
                ('billing_email', models.EmailField(blank=True, max_length=254, verbose_name='Email de facturación')),
                ('tax_id', models.CharField(blank=True, help_text='Número de identificación tributaria', max_length=50, verbose_name='NIT/RUT')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de registro')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('last_active', models.DateTimeField(auto_now=True, verbose_name='Última actividad')),
                ('user', models.OneToOneField(help_text='Usuario asociado a la empresa', on_delete=django.db.models.deletion.CASCADE, related_name='company', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Empresa',
                'verbose_name_plural': 'Empresas',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Interview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interview_type', models.CharField(choices=[('phone', 'Telefónica'), ('video', 'Video llamada'), ('in_person', 'Presencial'), ('technical', 'Técnica'), ('hr', 'Recursos Humanos'), ('final', 'Final')], max_length=20, verbose_name='Tipo de entrevista')),
                ('status', models.CharField(choices=[('scheduled', 'Programada'), ('confirmed', 'Confirmada'), ('in_progress', 'En progreso'), ('completed', 'Completada'), ('cancelled', 'Cancelada'), ('rescheduled', 'Reprogramada'), ('no_show', 'No se presentó')], default='scheduled', max_length=20, verbose_name='Estado')),
                ('scheduled_date', models.DateTimeField(verbose_name='Fecha y hora programada')),
                ('duration_minutes', models.PositiveIntegerField(default=60, verbose_name='Duración (minutos)')),
                ('timezone', models.CharField(default='America/Bogota', max_length=50, verbose_name='Zona horaria')),
                ('interviewer_name', models.CharField(max_length=200, verbose_name='Nombre del entrevistador')),
                ('interviewer_email', models.EmailField(max_length=254, verbose_name='Email del entrevistador')),
                ('interviewer_title', models.CharField(blank=True, max_length=200, verbose_name='Cargo del entrevistador')),
                ('location', models.CharField(blank=True, help_text='Dirección física o enlace de video llamada', max_length=500, verbose_name='Ubicación')),
                ('instructions', models.TextField(blank=True, help_text='Instrucciones especiales para el candidato', verbose_name='Instrucciones')),
                ('notes', models.TextField(blank=True, verbose_name='Notas de la entrevista')),
                ('score', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Puntuación (1-10)')),
                ('recommendation', models.CharField(blank=True, choices=[('hire', 'Contratar'), ('maybe', 'Tal vez'), ('no_hire', 'No contratar'), ('next_round', 'Siguiente ronda')], max_length=20, verbose_name='Recomendación')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de finalización')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interviews', to='jobs.application', verbose_name='Postulación')),
            ],
            options={
                'verbose_name': 'Entrevista',
                'verbose_name_plural': 'Entrevistas',
                'ordering': ['scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='SavedCandidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, help_text='Notas privadas sobre el candidato', verbose_name='Notas')),
                ('rating', models.PositiveIntegerField(blank=True, help_text='Calificación del candidato (1-5 estrellas)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Calificación')),
                ('tags', models.CharField(blank=True, help_text='Etiquetas separadas por comas (ej: senior, python, remote)', max_length=500, verbose_name='Etiquetas')),
                ('status', models.CharField(choices=[('saved', 'Guardado'), ('contacted', 'Contactado'), ('interviewing', 'En entrevista'), ('hired', 'Contratado'), ('rejected', 'Rechazado'), ('not_interested', 'No interesado')], default='saved', max_length=20, verbose_name='Estado')),
                ('saved_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de guardado')),
                ('last_contacted', models.DateTimeField(blank=True, null=True, verbose_name='Último contacto')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='applicants.applicantprofile', verbose_name='Candidato')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='companies.company', verbose_name='Empresa')),
            ],
            options={
                'verbose_name': 'Candidato Guardado',
                'verbose_name_plural': 'Candidatos Guardados',
                'ordering': ['-saved_at'],
            },
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['industry', 'size'], name='companies_c_industr_651a8b_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['location'], name='companies_c_locatio_ec810c_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['is_public', 'is_verified'], name='companies_c_is_publ_157b4e_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['created_at'], name='companies_c_created_301a54_idx'),
        ),
        migrations.AddIndex(
            model_name='interview',
            index=models.Index(fields=['application', 'status'], name='companies_i_applica_94fe8a_idx'),
        ),
        migrations.AddIndex(
            model_name='interview',
            index=models.Index(fields=['scheduled_date'], name='companies_i_schedul_065fc7_idx'),
        ),
        migrations.AddIndex(
            model_name='interview',
            index=models.Index(fields=['interviewer_email'], name='companies_i_intervi_10839c_idx'),
        ),
        migrations.AddIndex(
            model_name='savedcandidate',
            index=models.Index(fields=['company', 'status'], name='companies_s_company_582e0d_idx'),
        ),
        migrations.AddIndex(
            model_name='savedcandidate',
            index=models.Index(fields=['saved_at'], name='companies_s_saved_a_959760_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='savedcandidate',
            unique_together={('company', 'applicant')},
        ),
    ]
