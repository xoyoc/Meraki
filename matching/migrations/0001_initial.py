# Generated by Django 5.2.4 on 2025-08-05 04:26

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('applicants', '0002_initial'),
        ('companies', '0001_initial'),
        ('jobs', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MatchingStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Fecha para la cual se calculan las estadísticas', verbose_name='Fecha')),
                ('total_matches_calculated', models.PositiveIntegerField(default=0, verbose_name='Total de matches calculados')),
                ('average_match_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, verbose_name='Score promedio de matching')),
                ('excellent_matches', models.PositiveIntegerField(default=0, verbose_name='Matches excelentes (90-100%)')),
                ('good_matches', models.PositiveIntegerField(default=0, verbose_name='Matches buenos (70-89%)')),
                ('fair_matches', models.PositiveIntegerField(default=0, verbose_name='Matches regulares (50-69%)')),
                ('poor_matches', models.PositiveIntegerField(default=0, verbose_name='Matches pobres (<50%)')),
                ('successful_applications', models.PositiveIntegerField(default=0, help_text='Número de postulaciones que resultaron en contratación', verbose_name='Postulaciones exitosas')),
                ('total_applications', models.PositiveIntegerField(default=0, verbose_name='Total de postulaciones')),
                ('average_application_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, verbose_name='Score promedio de postulaciones')),
                ('algorithm_version', models.CharField(default='1.0', max_length=20, verbose_name='Versión del algoritmo')),
                ('calculation_time_avg', models.FloatField(default=0.0, verbose_name='Tiempo promedio de cálculo (segundos)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
            ],
            options={
                'verbose_name': 'Estadísticas de Matching',
                'verbose_name_plural': 'Estadísticas de Matching',
                'ordering': ['-date'],
                'indexes': [models.Index(fields=['date'], name='matching_ma_date_7f18ff_idx'), models.Index(fields=['algorithm_version'], name='matching_ma_algorit_4f8e21_idx')],
                'unique_together': {('date', 'algorithm_version')},
            },
        ),
        migrations.CreateModel(
            name='MatchScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skills_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Compatibilidad basada en skills requeridos vs skills del candidato', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de habilidades')),
                ('experience_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Compatibilidad basada en años de experiencia', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de experiencia')),
                ('location_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Compatibilidad basada en ubicación geográfica', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de ubicación')),
                ('education_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Compatibilidad basada en nivel educativo', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score de educación')),
                ('salary_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Compatibilidad basada en expectativas salariales', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score salarial')),
                ('total_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Puntuación total de compatibilidad', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score total')),
                ('weights_used', models.JSONField(default=dict, help_text='Pesos utilizados para calcular el score total', verbose_name='Pesos utilizados')),
                ('matching_details', models.JSONField(default=dict, help_text='Información detallada del análisis de compatibilidad', verbose_name='Detalles del matching')),
                ('confidence_level', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Qué tan confiable es este score basado en la cantidad de datos disponibles', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Nivel de confianza')),
                ('algorithm_version', models.CharField(default='1.0', help_text='Versión del algoritmo de matching utilizada', max_length=20, verbose_name='Versión del algoritmo')),
                ('calculated_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de cálculo')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('is_high_match', models.BooleanField(default=False, help_text='True si el score total es >= 80', verbose_name='Match alto')),
                ('is_recommended', models.BooleanField(default=False, help_text='True si el score total es >= 70', verbose_name='Recomendado')),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='applicants.applicantprofile', verbose_name='Candidato')),
                ('job_post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobs.jobpost', verbose_name='Vacante')),
            ],
            options={
                'verbose_name': 'Score de Matching',
                'verbose_name_plural': 'Scores de Matching',
                'ordering': ['-total_score', '-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='MatchingAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('calculate', 'Cálculo de match'), ('recalculate', 'Recálculo de match'), ('bulk_calculate', 'Cálculo masivo'), ('algorithm_update', 'Actualización de algoritmo'), ('preferences_update', 'Actualización de preferencias'), ('manual_adjustment', 'Ajuste manual')], max_length=50, verbose_name='Acción realizada')),
                ('old_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Score anterior')),
                ('new_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Score nuevo')),
                ('algorithm_version', models.CharField(default='1.0', max_length=20, verbose_name='Versión del algoritmo utilizada')),
                ('execution_time', models.FloatField(blank=True, null=True, verbose_name='Tiempo de ejecución (segundos)')),
                ('metadata', models.JSONField(default=dict, help_text='Información adicional sobre la acción realizada', verbose_name='Metadatos adicionales')),
                ('error_message', models.TextField(blank=True, help_text='Descripción del error si la acción falló', verbose_name='Mensaje de error')),
                ('success', models.BooleanField(default=True, verbose_name='Acción exitosa')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha y hora')),
                ('applicant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='applicants.applicantprofile', verbose_name='Candidato afectado')),
                ('job_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='jobs.jobpost', verbose_name='Vacante afectada')),
                ('user', models.ForeignKey(blank=True, help_text='Usuario que realizó la acción (si aplica)', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
                ('match_score', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='matching.matchscore', verbose_name='Score de matching afectado')),
            ],
            options={
                'verbose_name': 'Log de Auditoría de Matching',
                'verbose_name_plural': 'Logs de Auditoría de Matching',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MatchingPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skills_weight', models.PositiveIntegerField(default=40, help_text='Importancia de las habilidades en el matching', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Peso de habilidades (%)')),
                ('experience_weight', models.PositiveIntegerField(default=30, help_text='Importancia de la experiencia en el matching', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Peso de experiencia (%)')),
                ('location_weight', models.PositiveIntegerField(default=20, help_text='Importancia de la ubicación en el matching', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Peso de ubicación (%)')),
                ('education_weight', models.PositiveIntegerField(default=10, help_text='Importancia de la educación en el matching', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Peso de educación (%)')),
                ('salary_weight', models.PositiveIntegerField(default=0, help_text='Importancia del salario en el matching', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Peso salarial (%)')),
                ('minimum_match_score', models.PositiveIntegerField(default=50, help_text='Score mínimo para considerar un candidato como match', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Score mínimo de matching')),
                ('prefer_overqualified', models.BooleanField(default=False, help_text='¿Preferir candidatos con más experiencia de la requerida?', verbose_name='Preferir sobrecalificados')),
                ('strict_location_matching', models.BooleanField(default=False, help_text='¿Requiere coincidencia exacta de ubicación?', verbose_name='Matching estricto de ubicación')),
                ('willing_to_relocate', models.BooleanField(default=False, help_text='¿El candidato está dispuesto a mudarse por trabajo?', verbose_name='Dispuesto a reubicarse')),
                ('remote_work_only', models.BooleanField(default=False, help_text='¿El candidato solo busca trabajo remoto?', verbose_name='Solo trabajo remoto')),
                ('minimum_salary_expectation', models.PositiveIntegerField(blank=True, help_text='Salario mínimo esperado (en moneda local)', null=True, verbose_name='Expectativa salarial mínima')),
                ('auto_apply_threshold', models.PositiveIntegerField(default=0, help_text='Score mínimo para postulación automática (0 = deshabilitado)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Umbral de postulación automática')),
                ('notification_threshold', models.PositiveIntegerField(default=70, help_text='Score mínimo para recibir notificaciones de nuevos matches', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Umbral de notificación')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Última actualización')),
                ('applicant', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matching_preferences', to='applicants.applicantprofile', verbose_name='Candidato')),
                ('company', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matching_preferences', to='companies.company', verbose_name='Empresa')),
            ],
            options={
                'verbose_name': 'Preferencias de Matching',
                'verbose_name_plural': 'Preferencias de Matching',
                'constraints': [models.CheckConstraint(condition=models.Q(('company__isnull', False), ('applicant__isnull', False), _connector='OR'), name='matching_preferences_owner_required'), models.CheckConstraint(condition=models.Q(('company__isnull', False), ('applicant__isnull', False), _negated=True), name='matching_preferences_single_owner')],
            },
        ),
        migrations.AddIndex(
            model_name='matchscore',
            index=models.Index(fields=['job_post', '-total_score'], name='matching_ma_job_pos_eeef55_idx'),
        ),
        migrations.AddIndex(
            model_name='matchscore',
            index=models.Index(fields=['applicant', '-total_score'], name='matching_ma_applica_f9eb20_idx'),
        ),
        migrations.AddIndex(
            model_name='matchscore',
            index=models.Index(fields=['total_score'], name='matching_ma_total_s_96e12c_idx'),
        ),
        migrations.AddIndex(
            model_name='matchscore',
            index=models.Index(fields=['is_high_match'], name='matching_ma_is_high_c77dbb_idx'),
        ),
        migrations.AddIndex(
            model_name='matchscore',
            index=models.Index(fields=['is_recommended'], name='matching_ma_is_reco_4540f6_idx'),
        ),
        migrations.AddIndex(
            model_name='matchscore',
            index=models.Index(fields=['calculated_at'], name='matching_ma_calcula_abde86_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='matchscore',
            unique_together={('job_post', 'applicant')},
        ),
        migrations.AddIndex(
            model_name='matchingauditlog',
            index=models.Index(fields=['action', 'created_at'], name='matching_ma_action_fc335d_idx'),
        ),
        migrations.AddIndex(
            model_name='matchingauditlog',
            index=models.Index(fields=['user', 'created_at'], name='matching_ma_user_id_37dbcd_idx'),
        ),
        migrations.AddIndex(
            model_name='matchingauditlog',
            index=models.Index(fields=['job_post', 'created_at'], name='matching_ma_job_pos_1c5ff8_idx'),
        ),
        migrations.AddIndex(
            model_name='matchingauditlog',
            index=models.Index(fields=['applicant', 'created_at'], name='matching_ma_applica_dfc7e8_idx'),
        ),
        migrations.AddIndex(
            model_name='matchingauditlog',
            index=models.Index(fields=['success', 'created_at'], name='matching_ma_success_dfc0f3_idx'),
        ),
    ]
